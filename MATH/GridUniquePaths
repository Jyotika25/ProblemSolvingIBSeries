/*
int Solution::uniquePaths(int A, int B) {
 
 APPROACH
 If the matrix is 1XB or AX1, thn the  unique path  
 you can go. Either go down or go right
 divide the problem in subproblems. 
 at [m,n] you go one down, thn find unique paths from a[m-1,n]. 
Or if you go one right thn find unique paths from a[m,n-1].
Run this recursively.
   
    if(A==1 || B==1)
    return 1;
    
    return uniquePaths(A-1 ,B) + uniquePaths(A,B-1);
    }
    // this approach takes exponential time

*/



//aproach 2 using dp order(AB)

int Solution::uniquePaths(int A, int B)
{
    int dp[A][B];
    
    for(int i =0; i<A; i++)
    {
        dp[i][0] = 1;
    }
    
    for(int j=0; j<B; j++)
    {
        dp[0][j] = 1;
    }
    
    for(int i=1; i<A; i++)
    {
        for(int j=1; j<B; j++)
        {
            dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    return dp[A-1][B-1];
}


//APPROACH 3 USING COMBINATORICS

/* consider 3*3 matrix 
      
      S         2           3
      2         1           3       
      3         2           E
      
      
      for going start to end v use combinaton of rrdd
      total ways =  4! 
                    ----
                    2!2!
                    in general
                ((m-1) + (n-1))!
                -----------------
                (m-1)! (n-1)!
                */










